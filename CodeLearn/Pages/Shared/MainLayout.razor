@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inherits LayoutComponentBase
@inject IHttpContextAccessor httpContextAccsessor
@inject IUserRepository UserRepository
@inject IRoleRepository RoleRepository
@inject UserManager<IdentityUser> UserManager



<MudThemeProvider Theme="MCGTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <NavBar />
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large">

            <CascadingValue Value="_userId">

                @if (_isAdmin)
                {
                    <MudGrid>

                        <MudItem Style="height : fit-content" xs="12" sm="3">
                            <CodeLearn.Component.DashBoard.Menu.DashBoardMenu></CodeLearn.Component.DashBoard.Menu.DashBoardMenu>
                        </MudItem>
                        <MudItem xs="12" sm="9">
                            @Body
                        </MudItem>
                    </MudGrid>
                }
                else
                {
                    @Body
                }
            </CascadingValue>

                <MudScrollToTop>
                    <MudFab Color="Color.Success" Icon="@Icons.Filled.ArrowCircleUp" />
                </MudScrollToTop>
            </MudContainer>

        </MudMainContent>



        <Footer />
    </MudLayout>


    @code{
            bool _drawerOpen = false;
            bool _isAdmin = false;

            MudTheme MCGTheme = new()
            {
                Palette = new Palette()
                {
                    Primary = "#19B33D",
                    AppbarBackground = "#19B33D",

                }
            };

            Guid _userId;
            IList<string> _roles = new List<string>();
        protected override async Task OnInitializedAsync()
        {
            if (httpContextAccsessor.HttpContext.User.Identity.IsAuthenticated == true)
            {
                User user = UserRepository.GetUserByName(httpContextAccsessor.HttpContext.User.Identity.Name);
                var identityUser = await UserManager.FindByNameAsync(user.Name);
                _userId = user.Id;
                if (identityUser != null)
                {
                    _roles = await UserManager.GetRolesAsync(identityUser);

                    foreach (var role in _roles)
                    {
                        if (role == "Admin") _isAdmin = true;
                    }
                }
            }
        }
    }