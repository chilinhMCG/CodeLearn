@page "/posts"
@inject IPostRepository PostRepository
@inject IPostRatingRepository PostRatingRepository
@inject IUserRepository UserRepository
@inject NavigationManager NavManager
@using Data.OrderingQuery;
@using Data.Ordering;
@using System.Web;

<MudContainer MaxWidth="MaxWidth.Medium" Class="my-10">
    <MudPaper Class="py-4 px-6">
        <div class="d-flex align-center mb-4">
            <MudTextField Class="mr-2" Immediate="true" @bind-Value="@_searchText" OnKeyPress="HandleKeyPressed"
                          Label="Tìm kiếm" Variant="@Variant.Outlined" Margin="Margin.Dense"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />

            <MudButton Class="px-12" Variant="@Variant.Outlined" Color="Color.Primary"
                       Disabled="_searchButtonDisabled" OnClick="MoveToSearchPage">
                Tìm
            </MudButton>
        </div>
        <div class="d-flex justify-space-between">
            <MudText Class="flex-grow-1" Typo="Typo.h4">Bài viết chia sẻ</MudText>
            <MudLink Disabled="_loadPostsState != State.Complete" Href="@(_user == null ? "Identity/Account/Login" : "posts/create")">
                <MudButton Variant="Variant.Filled" Color="Color.Primary">
                    <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.PostAdd" /> Tạo bài viết mới
                </MudButton>
            </MudLink>
        </div>
        <div class="d-flex justify-end align-end w-75 mb-6">
            <MudSelect Class="mr-2" T="PostOrderingOption" Label="Sắp xếp dựa trên" ToStringFunc="(option) => option.ToUserFriendlyText()"
                       Value="_orderingOption" ValueChanged="HandleOrderingOptionChanged">
                <MudSelectItem Value="PostOrderingOption.DateCreated" />
                <MudSelectItem Value="PostOrderingOption.OverallRating" />
                <MudSelectItem Value="PostOrderingOption.Comments" />
                <MudSelectItem Value="PostOrderingOption.Ratings" />
            </MudSelect>
            <SelectPostOrderByOption Class="mr-2" OrderingOption="_orderingOption"
                                     OrderByOption="_orderByOption" OrderByOptionChanged="HandleOrderByOptionChanged" />
        </div>

        @if (_loadPostsState == State.Loading)
        {
            <MudProgressCircular Class="d-block mx-auto" Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
        }
        else
        {
            @for (int i = 0; i < _postInfoPage.Items.Count; i++)
            {
                int index = i;
                if (index != 0)
                {
                    <MudDivider Class="my-4" />
                }
                <AuthorizeView>
                    <NotAuthorized>
                        <PostHeader @key="_postInfoPage.Items[index].Id" @bind-PostInfo="_postInfoPage.Items[index]" />
                    </NotAuthorized>

                    <Authorized>
                        <PostHeader @key="_postInfoPage.Items[index].Id" @bind-PostInfo="_postInfoPage.Items[index]"
                                    @bind-PostRating="_userPostRatings[index]" />
                    </Authorized>
                </AuthorizeView>
            }

            @if (_postInfoPage.PageCount > 1)
            {
                <div Class="d-flex justify-center">
                    <MudPagination Selected="_selectedPage" Count="_postInfoPage.PageCount" SelectedChanged="HandlePageChanged" />
                </div>
            }
        }
    </MudPaper>
</MudContainer>

@code {
    [CascadingParameter]
    private Task<User> _userTask { get; set; }

    private static int _postInfoPerPage = 10;

    private State _loadPostsState;

    private Page<PostInfo> _postInfoPage;

    private IList<PostRating> _userPostRatings;

    private int _selectedPage;

    private User _user = null;

    private string _searchText;

    private bool _searchButtonDisabled => string.IsNullOrWhiteSpace(_searchText);

    private PostOrderingOption _orderingOption;

    private OrderByOption _orderByOption;

    protected override async Task OnInitializedAsync()
    {
        _selectedPage = 1;
        _orderingOption = PostOrderingOption.DateCreated;
        _orderByOption = OrderByOption.Descending;
        _searchText = "";

        _loadPostsState = State.Loading;

        _user = await _userTask;

        await SearchAllPosts(_selectedPage);

        _loadPostsState = State.Complete;
    }

    private async Task HandleOrderingOptionChanged(PostOrderingOption option)
    {
        if (_orderingOption == option)
            return;

        _orderingOption = option;

        _loadPostsState = State.Loading;

        await SearchAllPosts(1);

        _loadPostsState = State.Complete;
    }

    private async Task HandleOrderByOptionChanged(OrderByOption option)
    {
        if (_orderByOption == option)
            return;

        _orderByOption = option;

        _loadPostsState = State.Loading;

        await SearchAllPosts(1);

        _loadPostsState = State.Complete;
    }

    private async Task HandlePageChanged(int selected)
    {
        _selectedPage = selected;

        _loadPostsState = State.Loading;

        await SearchAllPosts(_selectedPage);

        _loadPostsState = State.Complete;
    }

    private async Task SearchAllPosts(int pageNumber)
    {
        _selectedPage = pageNumber;

        _postInfoPage = await PostRepository.GetPagePostInfoAsync(_postInfoPerPage, pageNumber,
            oq => PostInfoUtils.CreatePostInfoOrderingQuery(_orderingOption, _orderByOption, oq));

        if (_user != null)
            _userPostRatings = await PostRatingRepository.GetRangeAsync(_user.Id, _postInfoPage.Items.Select(p => p.Id));
    }

    private void HandleKeyPressed(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            MoveToSearchPage();
    }

    private void MoveToSearchPage()
    {
        NavManager.NavigateTo($"posts/search/?q={HttpUtility.UrlEncode(_searchText)}");
    }
}
