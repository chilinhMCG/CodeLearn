@using Microsoft.JSInterop;
@using Microsoft.Extensions.Configuration;
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject IConfiguration Configuration;
@*
    /// <summary>
    /// Editor này được sử dụng làm base cho các editor khác như PostEditor, CommentEditor.
    /// </summary>
*@

@if (_state == State.Loading)
{
    <div class="d-flex justify-content-center @Class">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}

@if (_confObjName != null)
{
    <div hidden="@(_state != State.Complete)" class="@Class">
        <TinyMCE.Blazor.Editor JsConfSrc="@_confObjName"
                               Id="@_confObjName"
                               ApiKey="@Configuration["TinyMceApiKey"]"
                               @bind-Value="@_boundContent"
                               @bind-Text="@_boundTextContent" />
    </div>
}

@code {
    [Parameter]
    public string JsInitEditorFuncName { get; set; }

    [Parameter]
    public string JsDisposeEditorFuncName { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public string Content { get; set; }

    [Parameter]
    public EventCallback<string> ContentChanged { get; set; }

    /// <summary>
    /// 
    /// </summary>
    private string _content;

    private string _boundContent
    {
        get => _content;
        set
        {
            _content = value;
            ContentChanged.InvokeAsync(_content);
        }
    }

    [Parameter]
    public string TextContent { get; set; }

    [Parameter]
    public EventCallback<string> TextContentChanged { get; set; }

    private string _boundTextContent
    {
        get => TextContent;
        set => TextContentChanged.InvokeAsync(value);
    }

    private string _editorId = Guid.NewGuid().ToString();

    private string _confObjName;

    private State _state = State.Init;

    private DotNetObjectReference<Editor> _objRef;

    protected override void OnParametersSet()
    {
        _content = Content;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _state = State.Loading;
            _objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync(JsInitEditorFuncName, _objRef, _editorId);
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void OnConfigObjReady(string name)
    {
        _confObjName = name;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnEditorLoaded()
    {
        _state = State.Complete;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await JS.InvokeVoidAsync(JsDisposeEditorFuncName, _editorId);
        _objRef?.Dispose();
    }
}
