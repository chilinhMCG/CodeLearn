@using Data.Ordering;

<MudSelect Class="@Class" T="OrderByOption" Label="Sắp xếp" Disabled="OrderingOption == PostOrderingOption.Relevance"
           @bind-Value="_boundOrderByOption" ToStringFunc="OrderByOptionToString">
    <MudSelectItem Value="OrderByOption.Descending" />
    <MudSelectItem Value="OrderByOption.Ascending" />
</MudSelect>

@code {
    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public PostOrderingOption OrderingOption { get; set; }

    [Parameter]
    public OrderByOption OrderByOption { get; set; }

    [Parameter]
    public EventCallback<OrderByOption> OrderByOptionChanged { get; set; }

    private OrderByOption _boundOrderByOption
    {
        get => OrderByOption;
        set => OrderByOptionChanged.InvokeAsync(value);
    }

    protected override void OnParametersSet()
    {
        if (OrderingOption == PostOrderingOption.Relevance && _boundOrderByOption != OrderByOption.Descending)
            _boundOrderByOption = OrderByOption.Descending;
    }

    private string OrderByOptionToString(OrderByOption option)
    {
        return (OrderingOption, option) switch
        {
            (PostOrderingOption.Relevance, OrderByOption.Descending) => "Phù hợp nhất",

            (PostOrderingOption.OverallRating, OrderByOption.Descending) => "Đánh giá cao nhất",
            (PostOrderingOption.OverallRating, OrderByOption.Ascending) => "Đánh giá thấp nhất",

            (PostOrderingOption.DateCreated, OrderByOption.Descending) => "Mới nhất",
            (PostOrderingOption.DateCreated, OrderByOption.Ascending) => "Cũ nhất",

            (_, OrderByOption.Descending) => "Nhiều nhất",
            (_, OrderByOption.Ascending) => "Ít Nhất",

            _ => throw new ArgumentOutOfRangeException(nameof(OrderByOption), "provided option is invalid"),
        };
    }
}
