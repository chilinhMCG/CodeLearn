@inject IPostRepository PostRepository;
@inject IPostRatingRepository PostRatingRepository;
@inject NavigationManager NavManager
@inject IDialogService DialogService

<div class="d-flex align-center">
    <MudLink Href="@($"users/{Post.UserId}")">
        <MudAvatar Class="flex-grow-0" Color="Color.Info" />
    </MudLink>
    <div class="flex-grow-1 ml-2">
        <div class="d-flex justify-space-between">
            <div>
                <MudText Typo="Typo.body2" Class="d-inline">bài viết của</MudText>
                <MudLink Typo="Typo.subtitle1" Href="@($"users/{PostInfo.Id}")">@PostInfo.Author</MudLink>
                <MudText Typo="Typo.body2" Class="ml-2 d-inline">ngày đăng: @Post.DateCreated.ToShortDateStringDMY()</MudText>
                @if (Post.DateCreated != Post.DateLastEdited)
                {
                    <MudText Typo="Typo.body2" Class="ml-2 d-inline">
                        <i>(chỉnh sửa @DateUtils.RelativeTimeCompareToNow(Post.DateLastEdited))</i>
                    </MudText>
                }
            </div>

            @if (_loadRatingState == State.Complete)
            {
                <AuthorizeView>
                    <UserPostRating PostRating="@_userPostRating" PostRatingChanged="HandlePostRatingChanged" Class="mr-2" />
                </AuthorizeView>
            }
        </div>
        <div class="d-flex justify-content-between">
            <div class="d-flex align-center">
                <MudText Typo="Typo.subtitle1" Class="mr-1">@PostInfo.OverallRating</MudText>
                <HalfStarRating Value="@PostInfo.OverallRating" Class="mr-2" />
                <MudText Typo="Typo.subtitle1" Class="mr-4">@PostInfo.RatingCount đánh giá</MudText>
                <MudText Typo="Typo.subtitle1">@PostInfo.CommentCount bình luận</MudText>
            </div>
            <AuthorizeView>
                @if (Post.UserId == User.Id || _isAdmin)
                {
                    var color = _isAdmin ? Color.Error : Color.Dark;
                    <div>
                        <MudButton Class="mr-2" Color="color" OnClick="@(() => NavManager.NavigateTo($"/posts/edit/{Post.Id}"))"
                                   StartIcon="@Icons.Material.Filled.Edit">Sửa bài viết</MudButton>

                        <MudButton Color="color" OnClick="HandleDeletePost"
                                   StartIcon="@Icons.Material.Filled.Delete">Xóa bài viết</MudButton>
                    </div>
                }
            </AuthorizeView>
        </div>
    </div>
</div>
<MudDivider Class="my-4" />
<MudText Align="Align.Center" Typo="Typo.h4" Class="w-100 break-word mb-4"><b>@Post.Title</b></MudText>
<MudDivider Class="my-4" />
<FormatContent Class="ma-1rem" Content="@Post.Content" />


@code {
    [CascadingParameter]
    private Task<AuthenticationState> _authenticationStateTask { get; set; }

    [Parameter]
    public PostInfo PostInfo { get; set; }

    [Parameter]
    public EventCallback<PostInfo> PostInfoChanged { get; set; }

    [Parameter]
    public Post Post { get; set; }

    [Parameter]
    public User User { get; set; }

    private State _loadRatingState;

    private PostRating _userPostRating;

    private bool _isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateTask;
        _isAdmin = authState.User.IsInRole("Admin");

        _loadRatingState = State.Loading;

        if (User != null)
            _userPostRating = await PostRatingRepository.GetAsync(User.Id, Post.Id);

        _loadRatingState = State.Complete;
    }

    private async Task HandlePostRatingChanged(PostRating postRating)
    {
        _userPostRating = postRating;

        await PostInfoChanged.InvokeAsync(await PostRepository.GetPostInfoAsync(PostInfo.Id));
    }

    private async void HandleDeletePost()
    {
        var confirmationParameters = new DialogParameters() {
            {"ContentText", "Bạn có chắc là muốn xóa bài viết này?" },
            {"ConfirmButtonText", "Xóa" },
            {"CancelButtonText", "Hủy" },
        };

        var confirmationDialog = DialogService.Show<ConfirmationDialog>("Xóa bài viết chia sẻ", confirmationParameters);

        var result = await confirmationDialog.Result;

        if (!result.Cancelled)
        {
            await PostRepository.RemoveAsync(Post);

            var successParameters = new DialogParameters() {
                {"ContentText", "Xóa bài viết thành công." },
            };

            await DialogService.Show<InformationDialog>("Thành công", successParameters).Result;

            NavManager.NavigateTo("/posts");
        }
    }
}
