@page "/admin/user-manager"
@inject ISnackbar Snackbar
@*@inject IUserRepository UserRepository*@
@using CodeLearn.Areas.Identity

@inject Microsoft.AspNetCore.Identity.UserManager<IdentityUser> IdentityUserManager
@*//tuong tu nhu cai nay ne, dung de o duoi nhu vay*@


<MudPaper Class="p-4">
    <MudItem lg="12">
        <MudTable Bordered="true" Items="allUsers">

            <HeaderContent>
                <MudTh Class="text-center">Tên</MudTh>
                <MudTh Class="text-center">Email</MudTh>
                <MudTh Class="text-center">Quyền hạn</MudTh>
                <MudTh Class="text-center">Trạng thái</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.UserName</MudTd>
                <MudTd>@context.Email</MudTd>
                <MudTd>
                    @IdentityUserManager.GetRolesAsync(context).Result.FirstOrDefault();
                </MudTd>
                <MudTd></MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudPaper>


<br />

@code {

    private List<User> _users { get; set; }

    List<string> _listRoles { get; set; }

    //[Inject]
    //private UserManager<IdentityUser> _userManager { get; set; }

    //[Inject]
    //private RoleManager<IdentityRole> _roleManager { get; set; }
    //Cai nao la inject thi em de len tren dau nha

    List<IdentityUser> allUsers = new();

    protected override async Task OnInitializedAsync()
    {
        //_users = UserRepository.GetUser();
        var user = await IdentityUserManager.GetUsersInRoleAsync("Admin");
        allUsers = IdentityUserManager.Users.ToList();
    }


    async Task<string> GetRoleUser(IdentityUser user)
    {
        var Roles = await IdentityUserManager.GetRolesAsync(user);
        return Roles.FirstOrDefault();
    }
}
