@page "/admin/course-type-manager"
@attribute [Authorize(Roles = "Admin")]
@inject ICourseTypeRepository CourseTypeRepository
@inject ICourseRepository CourseRepository
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudGrid>
    <MudItem lg="6">
        <MudPaper Class="p-3">
            <MudGrid>
                <MudItem lg="12">
                    <MudText Color="Color.Success">Thêm nhóm khóa học</MudText>
                </MudItem>
                <MudItem lg="9">
                    <MudTextField @bind-Value="_courseType.Name" Label="Tên nhóm khóa học"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense">
                    </MudTextField>
                </MudItem>
                <MudItem lg="3">
                    <MudIconButton Icon="@Icons.Material.Outlined.AddCircleOutline"
                                   Color="@Color.Success" @onclick="Add" />
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem lg="12">
        <MudPaper Class="p-3">
            <MudTable Items="@courseTypes" Hover="true" Bordered="true">
                <HeaderContent>
                    <MudTh Style="text-align:center">Tên nhóm khóa học</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    
                    <MudTd DataLabel="Name">
                        <MudTextField @bind-Value="context.Name" Variant="Variant.Outlined"
                                      Margin="Margin.Dense" Required="true" @onfocusout="(() => EditCourseType(context))"></MudTextField>
                    </MudTd>
                    <MudTd DataLabel="Delete">
                        <MudButton Color="Color.Error" @onclick="(() => DeleteCourseTypeAsync(context))">Delete</MudButton>
                    </MudTd>
                </RowTemplate>

            </MudTable>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

        CourseType _courseType = new();

        List<CourseType> courseTypes = new();

        List<Course> courses { get; set; }

    protected override void OnInitialized()
    {

        courseTypes = CourseTypeRepository.GetAllCourseType();
        courses = CourseRepository.GetAllCourse();
    }

    protected void Add()
    {
        if (!string.IsNullOrWhiteSpace(_courseType.Name))
        {
            CourseTypeRepository.AddCourseType(_courseType);
            Snackbar.Add("Thêm nhóm bài học thành công !", Severity.Success);
            _courseType = new();
        }

        courseTypes = CourseTypeRepository.GetAllCourseType();

    }

    protected void EditCourseType(CourseType courseType)
    {
        CourseTypeRepository.UpdateCourseType(courseType);
    }


    protected async Task DeleteCourseTypeAsync(CourseType courseType)
    {

        bool deleteConfirm = await JSRuntime.InvokeAsync<bool>("DeleteConfirm");
        if (deleteConfirm)
        {
            if (courses.Any(x => x.CourseTypeId == courseType.Id))
            {
                Snackbar.Add("Bạn phải xóa hết khóa học trong loại khóa học này trước!", Severity.Warning);
            }
            else
            {
                CourseTypeRepository.DeleteCourseType(courseType);
            }
        }
        await InvokeAsync(StateHasChanged);
    }

}
