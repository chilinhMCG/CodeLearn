@page "/admin/course-type-manager"
@attribute [Authorize(Roles = "Admin")]
@inject ICourseTypeRepository CourseTypeRepository
@inject ICourseRepository CourseRepository
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation 

<MudGrid>
    <MudItem lg="6">
        <MudPaper Class="p-3">
            <MudGrid>
                <MudItem lg="12">
                    <MudText Color="Color.Success">Thêm nhóm khóa học</MudText>
                </MudItem>
                <MudItem lg="9">
                    <MudTextField @bind-Value="_newCourseType.Name" Label="Tên nhóm khóa học"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense">
                    </MudTextField>
                </MudItem>
                <MudItem lg="3">
                    <MudIconButton Icon="@Icons.Material.Outlined.AddCircleOutline"
                                   Color="@Color.Success" @onclick="Add" />
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem lg="12">
        <MudPaper Class="p-3">
            <MudTable Items="@_courseTypes" Hover="true" Bordered="true">
                <HeaderContent>
                    <MudTh Style="text-align:center">Tên nhóm khóa học</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    
                    <MudTd DataLabel="Name">
                        <MudTextField @bind-Value="context.Name" Variant="Variant.Outlined"
                                      Margin="Margin.Dense" Required="true" @onfocusout="(() => EditCourseType(context))"></MudTextField>
                    </MudTd>
                    <MudTd DataLabel="Delete" Class="text-center">
                        <MudButton Color="Color.Error" @onclick="(() => _deleteCourseTypeAsync(context))">Delete</MudButton>
                    </MudTd>
                </RowTemplate>

            </MudTable>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    private CourseType _newCourseType = new();

    private List<CourseType> _courseTypes = new();

    private List<Course> _courses { get; set; }

    protected override void OnInitialized()
    {

        _courseTypes = CourseTypeRepository.GetAllCourseType();
        _courses = CourseRepository.GetAllCourse();
    }

    protected void Add()
    {
        if (!string.IsNullOrWhiteSpace(_newCourseType.Name))
        {
            CourseTypeRepository.AddCourseType(_newCourseType);
            Snackbar.Add("Thêm nhóm bài học thành công !", Severity.Success);
            _newCourseType = new();
        }

        _courseTypes = CourseTypeRepository.GetAllCourseType();

    }

    protected void EditCourseType(CourseType courseType)
    {
        CourseTypeRepository.UpdateCourseType(courseType);
        Snackbar.Add("Chỉnh sửa thành công!", Severity.Success);
    }


    private async Task _deleteCourseTypeAsync(CourseType courseType)
    {
        var dialog = DialogService.Show<DeleteDialog>("Xóa loại khóa học");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if (_courses.Any(x => x.CourseTypeId == courseType.Id))
            {
                Snackbar.Add("Bạn phải xóa hết tất cả các khóa học trong loại khóa học này trước!", Severity.Warning);
            }
            else
            {
                CourseTypeRepository.DeleteCourseType(courseType);
                _courseTypes = CourseTypeRepository.GetAllCourseType();

            }
        }
    }

}
