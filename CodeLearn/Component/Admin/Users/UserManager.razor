@page "/admin/users"
@using System.Net.Http.Json
@inject IUserRepository UserRepository
@inject IDiscussionRepository DicussionRepository
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="p-4 pb-1 mt-4 ">
    <MudTable Items="@listUsers" Hover="true" SortLabel="Sort By" Filter="new Func<User,bool>(FilterUser)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Danh sách thành viên</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchUser" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x => x.Name)">Tên</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel Enabled="@enabled" SortBy="new Func<User, object>(x => x.Email)">Email</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x => x.IsBlocked)">Trạng thái</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x => x.Discussions.Count)">Số bài đăng</MudTableSortLabel></MudTh>
            <MudTh>Tác vụ</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Is Blocked"><CodeLearn.Component.DashBoard.Component.StatusLabel IsBlocked="@context.IsBlocked"></CodeLearn.Component.DashBoard.Component.StatusLabel></MudTd>
            <MudTd DataLabel="Posts">@context.Discussions.Count</MudTd>
            <MudTd DataLabel="Tác vụ">
                <MudButton @onclick="(() => BlockUser(context))" Variant="Variant.Filled" Color="Color.Error">Khóa </MudButton>
            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 25, 50 }" />
        </PagerContent>
    </MudTable>

    <MudSwitch @bind-Checked="enabled" Color="Color.Info">Cho phép sắp xếp theo cột</MudSwitch>
</MudPaper>
@code {
    int count = 1;
    private bool enabled = true;
    private IEnumerable<User> listUsers = new List<User>();
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string value1, value2;

    protected override async Task OnInitializedAsync()
    {
        listUsers = await UserRepository.GetAllUser();
        foreach (var user in listUsers)
        {
            user.Discussions = await DicussionRepository.GetDiscussionByAuthor(user.Id);

        }
    }
    private string searchUser = "";
    private bool FilterUser(User element) => FilterFunc(element, searchUser);

    private bool FilterFunc(User element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Email} {element.Discussions.Count}".Contains(searchString))
            return true;
        return false;
    }

    private async Task<IEnumerable<string>> SearchUser(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.

        await Task.Delay(5);
        if (string.IsNullOrEmpty(value))
            return new string[0];
        var users = listUsers.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        var result = from u in users
                     select u.Name;
        return result;
    }
    async Task BlockUser(User user)
    {
        var dialog = DialogService.Show<DeleteDialog>("Khóa/Mở khóa tài khoản người dùng");

        var result = await dialog.Result;
        if (user.IsBlocked == true)
            user.IsBlocked = false;
        else user.IsBlocked = true; 

        if (!result.Cancelled)
        {

            UserRepository.UpdateUser(user);

            Snackbar.Add("Xóa thành công!", Severity.Success);
            await Task.Delay(1500);
        }
    }
}