@page "/course-detail/{id}" 
@inject ICourseDetailRepository CourseDetailRepository
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<MudPaper Class="p-4">
    <MudItem>
        <MudText Typo="Typo.h4" Align="Align.Center">
            @currentCourseDetail.Name
            <br />
            <AuthorizeView Roles="Admin">
                <MudButton Color="Color.Error" Variant="Variant.Filled" @onclick="deleteAsync">Delete</MudButton>
            </AuthorizeView>
        </MudText>
    </MudItem>
    <MudItem>
        <MudText Align="Align.Justify">
            @((MarkupString)currentCourseDetail.Content)
        </MudText>
    </MudItem>
    
</MudPaper>

@code {
    [Parameter]
    public string ID { get; set; }

    protected List<CourseDetail> courseDetails { get; set; } = new List<CourseDetail>();

    protected CourseDetail currentCourseDetail { get; set; } = new CourseDetail();

    protected override void OnInitialized()
    {
        courseDetails = CourseDetailRepository.GetAllCourseDetail();

        currentCourseDetail = courseDetails.FirstOrDefault(x => x.Id.ToString() == this.ID);
    }

    protected async Task deleteAsync()
    {

        var dialog = DialogService.Show<DeleteDialog>("Xóa bài học");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {

            CourseDetailRepository.DeleteCourseDetail(currentCourseDetail);
            Snackbar.Add("Xóa thành công!", Severity.Success);

        }
        await Task.Delay(2000);
        await JSRuntime.InvokeVoidAsync("RedirectToHomePage");
    }


}
