@page "/"
@inject ICourseTypeRepository CourseTypeRepository
@inject ICourseRepository CourseRepository


<MudPaper Class="p-4 pb-1 mt-4 ">
    <MudText Typo="Typo.h4" Color="Color.Dark">
        Tự học lập trình trực tuyến. Hãy bắt đầu với khoá học đầu tiên của bạn!
    </MudText>
    <MudGrid>
        <MudItem lg="4">
            <MudTextField @bind-Value="_searchString"
                          Label="Tìm kiếm khóa học"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Filled.Search"
                          Margin="Margin.Dense"
                          Class="my-4" />
        </MudItem>
    </MudGrid>
</MudPaper>
<br />
@foreach (var item in _courseTypes)
{
    @if (_searchCourses.Any(x => x.CourseTypeId == item.Id))
    {
        <MudPaper Class="p-4">
            <MudText Typo="Typo.h5">@item.Name</MudText>
            <br />
            <MudGrid>
                @foreach (var course in _searchCourses.Where(x => x.CourseTypeId == item.Id && x.Status == CourseStatusEnum.Free))
                {

                    <MudItem lg="3">
                        <MudLink Href="@("/course/" + course.Id.ToString())" Underline="Underline.None">
                            <MudCard Elevation="0">
                                <!-- khoa hoc -->
                                <MudCardMedia Image="@($"images/CoursesImg/{course.Thumbnail}")" Height="200" />
                                <MudCardContent>
                                    <MudText Typo="Typo.h6">@course.Name</MudText>
                                    <MudText Typo="Typo.caption">@course.Author</MudText>
                                    <!-- if length of description > 44 then just show 44 letters else show all-->
                                    @if (course.Description.Length > 44)
                                     {
                                        <MudText Typo="Typo.body2">@((MarkupString)(course.Description.Substring(0, 44) + "..."))</MudText>
                                     }
                                    else
                                    {
                                        <MudText Typo="Typo.body2">@course.Description</MudText>
                                    }
                                    <br />


                                </MudCardContent>
                                <MudDivider></MudDivider>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" Color="Color.Info">@course.Status</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudLink>
                        <MudRating @bind-SelectedValue="@course.IntAverageRate" @onclick="(() => UpdateRating(course, course.IntAverageRate))" Size="Size.Small" />
                        @course.RateCount vote(s)
                    </MudItem>
                }
            </MudGrid>
        </MudPaper>
        <br>
    }
}
@code {
    private string _searchString = String.Empty;

    private List<CourseType> _courseTypes { get; set; }

    protected IEnumerable<Course> _searchCourses { get; set; }

    private int _courseRating { get; set; }

    private int _rating { get; set; }

    protected override void OnInitialized()
    {
        _courseTypes = CourseTypeRepository.GetAllCourseType();
        _searchCourses = CourseRepository.GetAllCourse()
            .Where(x => string.IsNullOrEmpty(_searchString) ||
                x.Name.ToLower().Contains(_searchString.ToLower())
        );

    }

    public void UpdateRating(Course course, int value)
    {
        CourseRepository.UpdateCourseRating(course, value);

    }
}
