@page "/course/{id}"
@inject ILessonRepository LessonRepository
@inject ICourseRepository CourseRepository
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudPaper Class="d-flex justify-space-around p-4">
    <MudItem Style="float:left; width:20%">
        <MudText Typo="Typo.h4">@currentCourse.Name</MudText>
        <MudText Typo="Typo.subtitle1">
            @currentCourse.Author
            @{ 
                double ratingToShow = currentCourse.TotalRating / currentCourse.RateCount;
            }
            <MudRating @bind-SelectedValue="integerRating" @onclick="(() => UpdateRating(currentCourse, integerRating))" Size="Size.Small" />
            <span>
                @ratingToShow.ToString("#.#") (@currentCourse.RateCount)
            </span>
        </MudText>

    </MudItem>

    <MudDivider Vertical="true" FlexItem="true" Class="mr-3" />
    <MudItem Style="float:right; width:80%">
        <MudText Align="Align.Justify">
            @((MarkupString) currentCourse.Description)
        </MudText>
    </MudItem>

</MudPaper>
<br>


<!-- bai hoc -->
<MudPaper Class="d-flex p-4 text-center">
    
    <MudItem> 
        @foreach (var item in lessons)
        {
            <MudCard @key="item" Style="width:155px;margin:20px;" Class="float-left">
                <MudCardContent>
                    <MudLink Underline="Underline.None" Href="@($"/lesson/{item.Id}")">@item.Name</MudLink>
                </MudCardContent>
                <AuthorizeView Roles="Admin">
                    <MudCardActions>
                        <p>
                            <MudButton OnClick="(() => DeleteLessonAsync(item))" Variant="Variant.Outlined" Color="Color.Error" 
                                       Size="Size.Small">Xóa</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Default" Size="Size.Small"
                                       Link="@($"/admin/lesson/edit/{item.Id}")" Class="text-decoration-none">Sửa</MudButton>
                        </p>
                    </MudCardActions>
                </AuthorizeView>
            </MudCard>
        }
    </MudItem>
</MudPaper>
<br />

<AuthorizeView Roles="Admin">
    <MudPaper Class="d-flex p-4 justify-space-around">
        <MudItem>
            <MudButton Color="Color.Error" Variant="Variant.Outlined" @onclick="DeleteCourseAsync">Xóa khóa học</MudButton>

            <MudButton Color="Color.Default" Class="text-decoration-none"
                       Variant="Variant.Outlined" Link="@($"/admin/course/edit/{currentCourse.Id}")">Chỉnh sửa khóa học</MudButton>

            <MudButton Color="Color.Primary" Class="text-decoration-none"  
                       Variant="Variant.Outlined" Link="@($"admin/lesson/add-new/{currentCourse.Id}")">Tạo bài học mới</MudButton>
        </MudItem>
    </MudPaper>
</AuthorizeView>






@code {
    [Parameter]
    public string Id { get; set; }

    List<Course> courses { get; set; } = new List<Course>();

    Course currentCourse { get; set; } = new Course();

    List<Lesson> lessons { get; set; } = new List<Lesson>();

    int integerRating = 0;

    protected override void OnInitialized()
    {
        currentCourse = CourseRepository.GetSingleCourse(this.Id);
        lessons = LessonRepository.GetAllLessonByCourseID(this.Id);
        if (currentCourse.RateCount != 0)
        {
            integerRating = (int)currentCourse.TotalRating / currentCourse.RateCount;
        }

    }


    async Task DeleteCourseAsync()
    {
        var dialog = DialogService.Show<DeleteDialog>("Xóa khóa học");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            if (lessons.Any(x => x.CourseId == currentCourse.Id))
            {
                Snackbar.Add("Bạn cần phải xóa tất cả bài học trong khóa này trước!", Severity.Warning);
            }
            else
            {
                CourseRepository.DeleteCourse(currentCourse);
                Snackbar.Add("Xóa thành công", Severity.Success);
                Navigation.NavigateTo("/");
            }

        }


    }

    async Task DeleteLessonAsync(Lesson lesson)
    {
        var dialog = DialogService.Show<DeleteDialog>("Xóa bài học");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            LessonRepository.DeleteLesson(lesson);
            Snackbar.Add("Xóa thành công", Severity.Success);

            await Task.Delay(1500);
            Navigation.NavigateTo($"course/{lesson.CourseId}", true);
        }


    }

    void UpdateRating(Course course, int value)
    {
        CourseRepository.UpdateRating(course, integerRating);
        Snackbar.Add("Vote thành công!", Severity.Success);

        integerRating = (int)course.TotalRating / course.RateCount;
    }


}
