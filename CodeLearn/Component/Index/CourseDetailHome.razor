@page "/course-detail/{id}"
@inject ICourseRepository CourseRepository
@inject ICourseDetailRepository CourseDetailRepository
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudPaper Class="p-4">
    <MudItem>
        <MudText Typo="Typo.h4" Align="Align.Center">
            <!-- ten bai hoc-->
            @_currentCourseDetail.Name
            <br />
            <AuthorizeView Roles="Admin">
                <MudButton Color="Color.Error" Variant="Variant.Filled" @onclick="_deleteCourseDetailAsync">Delete</MudButton>
                <MudButton Color="Color.Dark" Style="text-decoration:none" s Variant="Variant.Filled" Link="@($"/admin/course-detail/edit/{_currentCourseDetail.Id}")">Edit</MudButton>
            </AuthorizeView>
        </MudText>
    </MudItem>
    <br />
    <MudItem>
        <MudText Align="Align.Justify">
            @((MarkupString) _currentCourseDetail.Content)
        </MudText>
    </MudItem>
   
    <MudItem Class="text-center m-3">
        @{
            var index = courseDetailsWithCourseID.FindIndex(x => x.Id.ToString() == this.ID);
        }
        @if (index == 0)
        {
            <MudButton Color="Color.Success" Variant="Variant.Outlined" @onclick="(() => MoveToNextCourseDetail(index))">Next</MudButton>
        }
        else if (index == (courseDetailsWithCourseID.Count - 1))
        {
            <MudButton Color="Color.Success" Variant="Variant.Outlined" @onclick="(() => MoveToPreviousCourseDetail(index))">Previous</MudButton>
        }
        else
        {
            <MudButton Color="Color.Success" Variant="Variant.Outlined" @onclick="(() => MoveToPreviousCourseDetail(index))">Previous</MudButton>
            <MudButton Color="Color.Success" Variant="Variant.Outlined" @onclick="(() => MoveToNextCourseDetail(index))">Next</MudButton>
        }
    </MudItem>
</MudPaper>

@code {
    [Parameter]
    public string ID { get; set; }

    private List<CourseDetail> _courseDetails { get; set; } = new List<CourseDetail>();


    private CourseDetail _currentCourseDetail { get; set; } = new CourseDetail();

    private List<CourseDetail> courseDetailsWithCourseID { get; set; } = new List<CourseDetail>();

    private Course currentCourse { get; set; } = new Course();



    protected override void OnInitialized()
    {

        _courseDetails = CourseDetailRepository.GetAllCourseDetail();

        _currentCourseDetail = _courseDetails.FirstOrDefault(x => x.Id.ToString() == this.ID);

        currentCourse.CourseDetails = CourseDetailRepository.GetAllCourseDetailsByCourseID(_currentCourseDetail.CourseId.ToString());

        courseDetailsWithCourseID = CourseDetailRepository.GetAllCourseDetailsByCourseID(_currentCourseDetail.CourseId.ToString());
    }

    private async Task _deleteCourseDetailAsync()
    {

        var dialog = DialogService.Show<DeleteDialog>("Xóa bài học");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {

            CourseDetailRepository.DeleteCourseDetail(_currentCourseDetail);
            Snackbar.Add("Xóa thành công!", Severity.Success);
            Navigation.NavigateTo("/");

        }

    }

    void MoveToNextCourseDetail(int index)
    {
        Navigation.NavigateTo($"course-detail/{courseDetailsWithCourseID[index + 1].Id}", true);
    }

    void MoveToPreviousCourseDetail(int index)
    {
        Navigation.NavigateTo($"course-detail/{courseDetailsWithCourseID[index - 1].Id}", true);
    }


}
