@page "/course-detail/{id}"
@inject ICourseDetailRepository CourseDetailRepository
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudPaper Class="p-4">
    <MudItem>
        <MudText Typo="Typo.h4" Align="Align.Center">
            <!-- ten bai hoc-->
            @_currentCourseDetail.Name
            <br />
            <AuthorizeView Roles="Admin">
                <MudButton Color="Color.Error" Variant="Variant.Filled" @onclick="_deleteCourseDetailAsync">Delete</MudButton>
                <MudButton Color="Color.Dark" Style="text-decoration:none" s Variant="Variant.Filled" Link="@($"/admin/course-detail/edit/{_currentCourseDetail.Id}")">Edit</MudButton>
            </AuthorizeView>
        </MudText>
    </MudItem>
    <br />
    <MudItem>
        <MudText Align="Align.Justify">
            @((MarkupString) _currentCourseDetail.Content)
        </MudText>
    </MudItem>

</MudPaper>

@code {
    [Parameter]
    public string ID { get; set; }

    private List<CourseDetail> _courseDetails { get; set; } = new List<CourseDetail>();

    private CourseDetail _currentCourseDetail { get; set; } = new CourseDetail();

    protected override void OnInitialized()
    {
        _courseDetails = CourseDetailRepository.GetAllCourseDetail();

        _currentCourseDetail = _courseDetails.FirstOrDefault(x => x.Id.ToString() == this.ID);
    }

    private async Task _deleteCourseDetailAsync()
    {

        var dialog = DialogService.Show<DeleteDialog>("Xóa bài học");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {

            CourseDetailRepository.DeleteCourseDetail(_currentCourseDetail);
            Snackbar.Add("Xóa thành công!", Severity.Success);
            Navigation.NavigateTo("/");

        }

    }


}
