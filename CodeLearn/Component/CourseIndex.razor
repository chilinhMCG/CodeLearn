@page "/course/{id}"
@inject ICourseDetailRepository CourseDetailRepository
@inject ICourseRepository CourseRepository
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudPaper Class="d-flex justify-space-around p-4">
    <MudItem Style="float:left; width:20%">
        <MudText Typo="Typo.h4">@_currentCourse.Name</MudText>
        <MudText Typo="Typo.subtitle1">
            @_currentCourse.Author
            <MudRating SelectedValue="@_currentCourse.Rating" Size="Size.Small" ReadOnly="true"></MudRating>
            <AuthorizeView Roles="Admin">
                <MudButton Color="Color.Error" Variant="Variant.Filled" @onclick="_deleteCourseAsync">Delete</MudButton>
            </AuthorizeView>
        </MudText>

    </MudItem>

    <MudDivider Vertical="true" FlexItem="true" Class="mr-3" />
    <MudItem Style="float:right; width:80%">
        <MudText Align="Align.Justify">
            @((MarkupString) _currentCourse.Description)
        </MudText>
    </MudItem>

</MudPaper>
<br />
<MudPaper Class="d-flex justify-space-around p-4">
    @foreach (var item in _courseDetails)
    {
        <MudCard Class="float-left">
            <MudCardContent>
                <MudLink Href="@($"/course-detail/{item.Id}")" Typo="Typo.button" Underline="Underline.None">@item.Name</MudLink>
            </MudCardContent>
        </MudCard>
    }
</MudPaper>



@code {
    [Parameter]
    public string Id { get; set; }

    private List<Course> _courses { get; set; } = new List<Course>();

    private Course _currentCourse { get; set; } = new Course();

    private List<CourseDetail> _courseDetails { get; set; } = new List<CourseDetail>();

    protected override void OnInitialized()
    {
        _courses = CourseRepository.GetAllCourse();
        _currentCourse = _courses.FirstOrDefault(x => x.Id.ToString() == this.Id);
        _courseDetails = CourseDetailRepository.GetAllCourseDetailsByCourseID(this.Id);
    }


    private async Task _deleteCourseAsync()
    {
        var dialog = DialogService.Show<DeleteDialog>("Xóa khóa học");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            if (_courseDetails.Any(x => x.CourseId == _currentCourse.Id))
            {
                Snackbar.Add("Bạn cần phải xóa tất cả bài học trong khóa này trước!", Severity.Warning);
            }
            else
            {
                CourseRepository.DeleteCourse(_currentCourse);
                Snackbar.Add("Xóa thành công", Severity.Success);
            }
        }

        Navigation.NavigateTo("/");
    }


}
