@page "/CreateDiscussion"
@using CodeLearn.Component
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using System.Security.Claims;
@inject IDiscussionRepository DiscussionRepository
@inject ISnackbar Snackbar
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject IUserRepository UserRepository

<MudPaper Class="p-4 pb-1 mt-4 ">
    <MudContainer>
        <MudItem>
            <MudText Typo="Typo.h5">Tạo một cuộc thảo luận mới</MudText>
            <MudText Style="font-size: small; font-style: oblique;" Color="Color.Secondary">*Mọi dữ liệu đều bắt buộc nhập</MudText>
        </MudItem>
        <br />
        <br />
        <MudItem xs="12" sm="12" md="12">
            <MudText Typo="Typo.h6">Tiêu đề</MudText>
            <MudTextField @bind-Value="_discussion.Question"
                          Variant="Variant.Filled"
                          Adornment="Adornment.End"
                          Margin="Margin.Dense"
                          Class="my-4"
                          Lines="1" />
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
            <MudText Typo="Typo.h6">#Hashtag</MudText>
            <MudGrid>
                &emsp;
                <MudTextField @bind-Value="@_searchString"
                              Variant="Variant.Filled"
                              Adornment="Adornment.End"
                              Margin="Margin.Dense"
                              Class="my-4"
                              Lines="1" />
                &emsp;
                <MudIconButton Style="width: 50px; height: 50px; border-radius: 50%; margin-top: 15px;" Icon="@Icons.Material.Filled.Add" OnClick="Add"></MudIconButton>
            </MudGrid>
            <MudChipSet AllClosable="true" OnClose="Close">
                    @if (_hashTags != null)
                    @foreach (var value in _hashTags)
                    {
                        <MudChip Text="@value"></MudChip>
                    }
            </MudChipSet>
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
            <MudText Typo="Typo.h6">Nội dung</MudText>
            <MudTextField T="string" Label="Outlined" Variant="Variant.Outlined" @bind-Value="_discussion.Content" Lines="17" />
        </MudItem>
        <br />
        <MudItem Style="text-align: end;">
            <MudButton Link="Discussion" Variant="Variant.Filled">Hủy</MudButton>
            &emsp;
            @if (string.IsNullOrWhiteSpace(_discussion.Question) == false && string.IsNullOrWhiteSpace(_discussion.Content) == false && _hashTags != null && _isLogIn == true)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddDiscussion">Đăng</MudButton>
            }
            else
            {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="true">Đăng</MudButton>
            }
        </MudItem>
    </MudContainer>
</MudPaper>
@code {
    List<Discussion> _discussions = new();
    CodeLearn.Models.Discussion _discussion = new();
    CodeLearn.Models.User _user = new();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string _searchString = String.Empty;
    IList<string> _hashTags;
    private bool _isLogIn;
    protected override void OnInitialized()
    {
        LogUsername().Wait();
    }
    private void Add()
    {
        if (_hashTags == null) _hashTags = new List<string>();
        _hashTags.Add(_searchString);
        _searchString = String.Empty;
    }
    private void Close(MudChip chip) => _hashTags.Remove(chip.Text);
    private void AddDiscussion()
    {
        var user = UserRepository.GetUserByName(LogUsername().Result);
        _discussion.UserId = user.Id;
        _discussion.HashTag = new List<string>();
        foreach (var item in _hashTags)
        {
            _discussion.HashTag.Add(item);
        }
        _hashTags.Clear();
        DiscussionRepository.AddDiscussion(_discussion);
        Snackbar.Add("Thêm nhóm bài học thành công !", Severity.Success);
        _discussion = new();
    }
    private async Task<string> LogUsername()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity.IsAuthenticated == true) _isLogIn = true;
        else _isLogIn = false;
        return user.Identity.Name;
    }
}
